Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    CHAR
    CHAR_TYPE
    EQ
    FOR
    GEQ
    GT
    LEQ
    LT
    NEQ
    PRINTF
    SCANF

Grammar

Rule 0     S' -> program
Rule 1     program -> function_list
Rule 2     function_list -> function_list function
Rule 3     function_list -> function
Rule 4     function -> INT ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE
Rule 5     param_list -> param_list COMMA param
Rule 6     param_list -> param
Rule 7     param_list -> empty
Rule 8     param -> INT ID
Rule 9     stmt_list -> stmt_list statement
Rule 10    stmt_list -> statement
Rule 11    statement -> var_decl SEMI
Rule 12    statement -> assignment SEMI
Rule 13    statement -> if_stmt
Rule 14    statement -> while_stmt
Rule 15    statement -> return_stmt SEMI
Rule 16    var_decl -> INT ID
Rule 17    assignment -> ID ASSIGN expr
Rule 18    if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
Rule 19    if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
Rule 20    while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
Rule 21    return_stmt -> RETURN expr
Rule 22    expr -> expr PLUS expr
Rule 23    expr -> expr MINUS expr
Rule 24    expr -> expr TIMES expr
Rule 25    expr -> expr DIVIDE expr
Rule 26    expr -> LPAREN expr RPAREN
Rule 27    expr -> NUMBER
Rule 28    expr -> ID
Rule 29    expr -> ID LPAREN arg_list RPAREN
Rule 30    arg_list -> arg_list COMMA expr
Rule 31    arg_list -> expr
Rule 32    arg_list -> empty
Rule 33    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 17
BOOL                 : 
CHAR                 : 
CHAR_TYPE            : 
COMMA                : 5 30
DIVIDE               : 25
ELSE                 : 19
EQ                   : 
FOR                  : 
GEQ                  : 
GT                   : 
ID                   : 4 8 16 17 28 29
IF                   : 18 19
INT                  : 4 8 16
LBRACE               : 4 18 19 19 20
LEQ                  : 
LPAREN               : 4 18 19 20 26 29
LT                   : 
MINUS                : 23
NEQ                  : 
NUMBER               : 27
PLUS                 : 22
PRINTF               : 
RBRACE               : 4 18 19 19 20
RETURN               : 21
RPAREN               : 4 18 19 20 26 29
SCANF                : 
SEMI                 : 11 12 15
TIMES                : 24
WHILE                : 20
error                : 

Nonterminals, with rules where they appear

arg_list             : 29 30
assignment           : 12
empty                : 7 32
expr                 : 17 18 19 20 21 22 22 23 23 24 24 25 25 26 30 31
function             : 2 3
function_list        : 1 2
if_stmt              : 13
param                : 5 6
param_list           : 4 5
program              : 0
return_stmt          : 15
statement            : 9 10
stmt_list            : 4 9 18 19 19 20
var_decl             : 11
while_stmt           : 14

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function_list
    (2) function_list -> . function_list function
    (3) function_list -> . function
    (4) function -> . INT ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE

    INT             shift and go to state 4

    program                        shift and go to state 1
    function_list                  shift and go to state 2
    function                       shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> function_list .
    (2) function_list -> function_list . function
    (4) function -> . INT ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE

    $end            reduce using rule 1 (program -> function_list .)
    INT             shift and go to state 4

    function                       shift and go to state 5

state 3

    (3) function_list -> function .

    INT             reduce using rule 3 (function_list -> function .)
    $end            reduce using rule 3 (function_list -> function .)


state 4

    (4) function -> INT . ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE

    ID              shift and go to state 6


state 5

    (2) function_list -> function_list function .

    INT             reduce using rule 2 (function_list -> function_list function .)
    $end            reduce using rule 2 (function_list -> function_list function .)


state 6

    (4) function -> INT ID . LPAREN param_list RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 7


state 7

    (4) function -> INT ID LPAREN . param_list RPAREN LBRACE stmt_list RBRACE
    (5) param_list -> . param_list COMMA param
    (6) param_list -> . param
    (7) param_list -> . empty
    (8) param -> . INT ID
    (33) empty -> .

    INT             shift and go to state 8
    RPAREN          reduce using rule 33 (empty -> .)
    COMMA           reduce using rule 33 (empty -> .)

    param_list                     shift and go to state 9
    param                          shift and go to state 10
    empty                          shift and go to state 11

state 8

    (8) param -> INT . ID

    ID              shift and go to state 12


state 9

    (4) function -> INT ID LPAREN param_list . RPAREN LBRACE stmt_list RBRACE
    (5) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 13
    COMMA           shift and go to state 14


state 10

    (6) param_list -> param .

    RPAREN          reduce using rule 6 (param_list -> param .)
    COMMA           reduce using rule 6 (param_list -> param .)


state 11

    (7) param_list -> empty .

    RPAREN          reduce using rule 7 (param_list -> empty .)
    COMMA           reduce using rule 7 (param_list -> empty .)


state 12

    (8) param -> INT ID .

    RPAREN          reduce using rule 8 (param -> INT ID .)
    COMMA           reduce using rule 8 (param -> INT ID .)


state 13

    (4) function -> INT ID LPAREN param_list RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 15


state 14

    (5) param_list -> param_list COMMA . param
    (8) param -> . INT ID

    INT             shift and go to state 8

    param                          shift and go to state 16

state 15

    (4) function -> INT ID LPAREN param_list RPAREN LBRACE . stmt_list RBRACE
    (9) stmt_list -> . stmt_list statement
    (10) stmt_list -> . statement
    (11) statement -> . var_decl SEMI
    (12) statement -> . assignment SEMI
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . return_stmt SEMI
    (16) var_decl -> . INT ID
    (17) assignment -> . ID ASSIGN expr
    (18) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (19) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (20) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (21) return_stmt -> . RETURN expr

    INT             shift and go to state 17
    ID              shift and go to state 18
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    RETURN          shift and go to state 28

    stmt_list                      shift and go to state 19
    statement                      shift and go to state 20
    var_decl                       shift and go to state 21
    assignment                     shift and go to state 22
    if_stmt                        shift and go to state 23
    while_stmt                     shift and go to state 24
    return_stmt                    shift and go to state 25

state 16

    (5) param_list -> param_list COMMA param .

    RPAREN          reduce using rule 5 (param_list -> param_list COMMA param .)
    COMMA           reduce using rule 5 (param_list -> param_list COMMA param .)


state 17

    (16) var_decl -> INT . ID

    ID              shift and go to state 29


state 18

    (17) assignment -> ID . ASSIGN expr

    ASSIGN          shift and go to state 30


state 19

    (4) function -> INT ID LPAREN param_list RPAREN LBRACE stmt_list . RBRACE
    (9) stmt_list -> stmt_list . statement
    (11) statement -> . var_decl SEMI
    (12) statement -> . assignment SEMI
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . return_stmt SEMI
    (16) var_decl -> . INT ID
    (17) assignment -> . ID ASSIGN expr
    (18) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (19) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (20) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (21) return_stmt -> . RETURN expr

    RBRACE          shift and go to state 31
    INT             shift and go to state 17
    ID              shift and go to state 18
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    RETURN          shift and go to state 28

    statement                      shift and go to state 32
    var_decl                       shift and go to state 21
    assignment                     shift and go to state 22
    if_stmt                        shift and go to state 23
    while_stmt                     shift and go to state 24
    return_stmt                    shift and go to state 25

state 20

    (10) stmt_list -> statement .

    RBRACE          reduce using rule 10 (stmt_list -> statement .)
    INT             reduce using rule 10 (stmt_list -> statement .)
    ID              reduce using rule 10 (stmt_list -> statement .)
    IF              reduce using rule 10 (stmt_list -> statement .)
    WHILE           reduce using rule 10 (stmt_list -> statement .)
    RETURN          reduce using rule 10 (stmt_list -> statement .)


state 21

    (11) statement -> var_decl . SEMI

    SEMI            shift and go to state 33


state 22

    (12) statement -> assignment . SEMI

    SEMI            shift and go to state 34


state 23

    (13) statement -> if_stmt .

    RBRACE          reduce using rule 13 (statement -> if_stmt .)
    INT             reduce using rule 13 (statement -> if_stmt .)
    ID              reduce using rule 13 (statement -> if_stmt .)
    IF              reduce using rule 13 (statement -> if_stmt .)
    WHILE           reduce using rule 13 (statement -> if_stmt .)
    RETURN          reduce using rule 13 (statement -> if_stmt .)


state 24

    (14) statement -> while_stmt .

    RBRACE          reduce using rule 14 (statement -> while_stmt .)
    INT             reduce using rule 14 (statement -> while_stmt .)
    ID              reduce using rule 14 (statement -> while_stmt .)
    IF              reduce using rule 14 (statement -> while_stmt .)
    WHILE           reduce using rule 14 (statement -> while_stmt .)
    RETURN          reduce using rule 14 (statement -> while_stmt .)


state 25

    (15) statement -> return_stmt . SEMI

    SEMI            shift and go to state 35


state 26

    (18) if_stmt -> IF . LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (19) if_stmt -> IF . LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 36


state 27

    (20) while_stmt -> WHILE . LPAREN expr RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 37


state 28

    (21) return_stmt -> RETURN . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr TIMES expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . LPAREN expr RPAREN
    (27) expr -> . NUMBER
    (28) expr -> . ID
    (29) expr -> . ID LPAREN arg_list RPAREN

    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 40
    ID              shift and go to state 41

    expr                           shift and go to state 38

state 29

    (16) var_decl -> INT ID .

    SEMI            reduce using rule 16 (var_decl -> INT ID .)


state 30

    (17) assignment -> ID ASSIGN . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr TIMES expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . LPAREN expr RPAREN
    (27) expr -> . NUMBER
    (28) expr -> . ID
    (29) expr -> . ID LPAREN arg_list RPAREN

    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 40
    ID              shift and go to state 41

    expr                           shift and go to state 42

state 31

    (4) function -> INT ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE .

    INT             reduce using rule 4 (function -> INT ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 4 (function -> INT ID LPAREN param_list RPAREN LBRACE stmt_list RBRACE .)


state 32

    (9) stmt_list -> stmt_list statement .

    RBRACE          reduce using rule 9 (stmt_list -> stmt_list statement .)
    INT             reduce using rule 9 (stmt_list -> stmt_list statement .)
    ID              reduce using rule 9 (stmt_list -> stmt_list statement .)
    IF              reduce using rule 9 (stmt_list -> stmt_list statement .)
    WHILE           reduce using rule 9 (stmt_list -> stmt_list statement .)
    RETURN          reduce using rule 9 (stmt_list -> stmt_list statement .)


state 33

    (11) statement -> var_decl SEMI .

    RBRACE          reduce using rule 11 (statement -> var_decl SEMI .)
    INT             reduce using rule 11 (statement -> var_decl SEMI .)
    ID              reduce using rule 11 (statement -> var_decl SEMI .)
    IF              reduce using rule 11 (statement -> var_decl SEMI .)
    WHILE           reduce using rule 11 (statement -> var_decl SEMI .)
    RETURN          reduce using rule 11 (statement -> var_decl SEMI .)


state 34

    (12) statement -> assignment SEMI .

    RBRACE          reduce using rule 12 (statement -> assignment SEMI .)
    INT             reduce using rule 12 (statement -> assignment SEMI .)
    ID              reduce using rule 12 (statement -> assignment SEMI .)
    IF              reduce using rule 12 (statement -> assignment SEMI .)
    WHILE           reduce using rule 12 (statement -> assignment SEMI .)
    RETURN          reduce using rule 12 (statement -> assignment SEMI .)


state 35

    (15) statement -> return_stmt SEMI .

    RBRACE          reduce using rule 15 (statement -> return_stmt SEMI .)
    INT             reduce using rule 15 (statement -> return_stmt SEMI .)
    ID              reduce using rule 15 (statement -> return_stmt SEMI .)
    IF              reduce using rule 15 (statement -> return_stmt SEMI .)
    WHILE           reduce using rule 15 (statement -> return_stmt SEMI .)
    RETURN          reduce using rule 15 (statement -> return_stmt SEMI .)


state 36

    (18) if_stmt -> IF LPAREN . expr RPAREN LBRACE stmt_list RBRACE
    (19) if_stmt -> IF LPAREN . expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr TIMES expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . LPAREN expr RPAREN
    (27) expr -> . NUMBER
    (28) expr -> . ID
    (29) expr -> . ID LPAREN arg_list RPAREN

    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 40
    ID              shift and go to state 41

    expr                           shift and go to state 43

state 37

    (20) while_stmt -> WHILE LPAREN . expr RPAREN LBRACE stmt_list RBRACE
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr TIMES expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . LPAREN expr RPAREN
    (27) expr -> . NUMBER
    (28) expr -> . ID
    (29) expr -> . ID LPAREN arg_list RPAREN

    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 40
    ID              shift and go to state 41

    expr                           shift and go to state 44

state 38

    (21) return_stmt -> RETURN expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . TIMES expr
    (25) expr -> expr . DIVIDE expr

    SEMI            reduce using rule 21 (return_stmt -> RETURN expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48


state 39

    (26) expr -> LPAREN . expr RPAREN
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr TIMES expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . LPAREN expr RPAREN
    (27) expr -> . NUMBER
    (28) expr -> . ID
    (29) expr -> . ID LPAREN arg_list RPAREN

    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 40
    ID              shift and go to state 41

    expr                           shift and go to state 49

state 40

    (27) expr -> NUMBER .

    PLUS            reduce using rule 27 (expr -> NUMBER .)
    MINUS           reduce using rule 27 (expr -> NUMBER .)
    TIMES           reduce using rule 27 (expr -> NUMBER .)
    DIVIDE          reduce using rule 27 (expr -> NUMBER .)
    SEMI            reduce using rule 27 (expr -> NUMBER .)
    RPAREN          reduce using rule 27 (expr -> NUMBER .)
    COMMA           reduce using rule 27 (expr -> NUMBER .)


state 41

    (28) expr -> ID .
    (29) expr -> ID . LPAREN arg_list RPAREN

    PLUS            reduce using rule 28 (expr -> ID .)
    MINUS           reduce using rule 28 (expr -> ID .)
    TIMES           reduce using rule 28 (expr -> ID .)
    DIVIDE          reduce using rule 28 (expr -> ID .)
    SEMI            reduce using rule 28 (expr -> ID .)
    RPAREN          reduce using rule 28 (expr -> ID .)
    COMMA           reduce using rule 28 (expr -> ID .)
    LPAREN          shift and go to state 50


state 42

    (17) assignment -> ID ASSIGN expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . TIMES expr
    (25) expr -> expr . DIVIDE expr

    SEMI            reduce using rule 17 (assignment -> ID ASSIGN expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48


state 43

    (18) if_stmt -> IF LPAREN expr . RPAREN LBRACE stmt_list RBRACE
    (19) if_stmt -> IF LPAREN expr . RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . TIMES expr
    (25) expr -> expr . DIVIDE expr

    RPAREN          shift and go to state 51
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48


state 44

    (20) while_stmt -> WHILE LPAREN expr . RPAREN LBRACE stmt_list RBRACE
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . TIMES expr
    (25) expr -> expr . DIVIDE expr

    RPAREN          shift and go to state 52
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48


state 45

    (22) expr -> expr PLUS . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr TIMES expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . LPAREN expr RPAREN
    (27) expr -> . NUMBER
    (28) expr -> . ID
    (29) expr -> . ID LPAREN arg_list RPAREN

    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 40
    ID              shift and go to state 41

    expr                           shift and go to state 53

state 46

    (23) expr -> expr MINUS . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr TIMES expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . LPAREN expr RPAREN
    (27) expr -> . NUMBER
    (28) expr -> . ID
    (29) expr -> . ID LPAREN arg_list RPAREN

    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 40
    ID              shift and go to state 41

    expr                           shift and go to state 54

state 47

    (24) expr -> expr TIMES . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr TIMES expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . LPAREN expr RPAREN
    (27) expr -> . NUMBER
    (28) expr -> . ID
    (29) expr -> . ID LPAREN arg_list RPAREN

    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 40
    ID              shift and go to state 41

    expr                           shift and go to state 55

state 48

    (25) expr -> expr DIVIDE . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr TIMES expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . LPAREN expr RPAREN
    (27) expr -> . NUMBER
    (28) expr -> . ID
    (29) expr -> . ID LPAREN arg_list RPAREN

    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 40
    ID              shift and go to state 41

    expr                           shift and go to state 56

state 49

    (26) expr -> LPAREN expr . RPAREN
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . TIMES expr
    (25) expr -> expr . DIVIDE expr

    RPAREN          shift and go to state 57
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48


state 50

    (29) expr -> ID LPAREN . arg_list RPAREN
    (30) arg_list -> . arg_list COMMA expr
    (31) arg_list -> . expr
    (32) arg_list -> . empty
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr TIMES expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . LPAREN expr RPAREN
    (27) expr -> . NUMBER
    (28) expr -> . ID
    (29) expr -> . ID LPAREN arg_list RPAREN
    (33) empty -> .

    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 40
    ID              shift and go to state 41
    RPAREN          reduce using rule 33 (empty -> .)
    COMMA           reduce using rule 33 (empty -> .)

    arg_list                       shift and go to state 58
    expr                           shift and go to state 59
    empty                          shift and go to state 60

state 51

    (18) if_stmt -> IF LPAREN expr RPAREN . LBRACE stmt_list RBRACE
    (19) if_stmt -> IF LPAREN expr RPAREN . LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 61


state 52

    (20) while_stmt -> WHILE LPAREN expr RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 62


state 53

    (22) expr -> expr PLUS expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . TIMES expr
    (25) expr -> expr . DIVIDE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMI            reduce using rule 22 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 22 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 22 (expr -> expr PLUS expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48

  ! PLUS            [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 22 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 22 (expr -> expr PLUS expr .) ]


state 54

    (23) expr -> expr MINUS expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . TIMES expr
    (25) expr -> expr . DIVIDE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMI            reduce using rule 23 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 23 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 23 (expr -> expr MINUS expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48

  ! PLUS            [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 23 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 23 (expr -> expr MINUS expr .) ]


state 55

    (24) expr -> expr TIMES expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . TIMES expr
    (25) expr -> expr . DIVIDE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMI            reduce using rule 24 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 24 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 24 (expr -> expr TIMES expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48

  ! PLUS            [ reduce using rule 24 (expr -> expr TIMES expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr TIMES expr .) ]
  ! TIMES           [ reduce using rule 24 (expr -> expr TIMES expr .) ]
  ! DIVIDE          [ reduce using rule 24 (expr -> expr TIMES expr .) ]


state 56

    (25) expr -> expr DIVIDE expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . TIMES expr
    (25) expr -> expr . DIVIDE expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMI            reduce using rule 25 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 25 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 25 (expr -> expr DIVIDE expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48

  ! PLUS            [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! TIMES           [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! DIVIDE          [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]


state 57

    (26) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 26 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 26 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 26 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 26 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 26 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 26 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 26 (expr -> LPAREN expr RPAREN .)


state 58

    (29) expr -> ID LPAREN arg_list . RPAREN
    (30) arg_list -> arg_list . COMMA expr

    RPAREN          shift and go to state 63
    COMMA           shift and go to state 64


state 59

    (31) arg_list -> expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . TIMES expr
    (25) expr -> expr . DIVIDE expr

    RPAREN          reduce using rule 31 (arg_list -> expr .)
    COMMA           reduce using rule 31 (arg_list -> expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48


state 60

    (32) arg_list -> empty .

    RPAREN          reduce using rule 32 (arg_list -> empty .)
    COMMA           reduce using rule 32 (arg_list -> empty .)


state 61

    (18) if_stmt -> IF LPAREN expr RPAREN LBRACE . stmt_list RBRACE
    (19) if_stmt -> IF LPAREN expr RPAREN LBRACE . stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (9) stmt_list -> . stmt_list statement
    (10) stmt_list -> . statement
    (11) statement -> . var_decl SEMI
    (12) statement -> . assignment SEMI
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . return_stmt SEMI
    (16) var_decl -> . INT ID
    (17) assignment -> . ID ASSIGN expr
    (18) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (19) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (20) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (21) return_stmt -> . RETURN expr

    INT             shift and go to state 17
    ID              shift and go to state 18
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    RETURN          shift and go to state 28

    stmt_list                      shift and go to state 65
    statement                      shift and go to state 20
    var_decl                       shift and go to state 21
    assignment                     shift and go to state 22
    if_stmt                        shift and go to state 23
    while_stmt                     shift and go to state 24
    return_stmt                    shift and go to state 25

state 62

    (20) while_stmt -> WHILE LPAREN expr RPAREN LBRACE . stmt_list RBRACE
    (9) stmt_list -> . stmt_list statement
    (10) stmt_list -> . statement
    (11) statement -> . var_decl SEMI
    (12) statement -> . assignment SEMI
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . return_stmt SEMI
    (16) var_decl -> . INT ID
    (17) assignment -> . ID ASSIGN expr
    (18) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (19) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (20) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (21) return_stmt -> . RETURN expr

    INT             shift and go to state 17
    ID              shift and go to state 18
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    RETURN          shift and go to state 28

    stmt_list                      shift and go to state 66
    statement                      shift and go to state 20
    var_decl                       shift and go to state 21
    assignment                     shift and go to state 22
    if_stmt                        shift and go to state 23
    while_stmt                     shift and go to state 24
    return_stmt                    shift and go to state 25

state 63

    (29) expr -> ID LPAREN arg_list RPAREN .

    PLUS            reduce using rule 29 (expr -> ID LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 29 (expr -> ID LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 29 (expr -> ID LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 29 (expr -> ID LPAREN arg_list RPAREN .)
    SEMI            reduce using rule 29 (expr -> ID LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 29 (expr -> ID LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 29 (expr -> ID LPAREN arg_list RPAREN .)


state 64

    (30) arg_list -> arg_list COMMA . expr
    (22) expr -> . expr PLUS expr
    (23) expr -> . expr MINUS expr
    (24) expr -> . expr TIMES expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . LPAREN expr RPAREN
    (27) expr -> . NUMBER
    (28) expr -> . ID
    (29) expr -> . ID LPAREN arg_list RPAREN

    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 40
    ID              shift and go to state 41

    expr                           shift and go to state 67

state 65

    (18) if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list . RBRACE
    (19) if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list . RBRACE ELSE LBRACE stmt_list RBRACE
    (9) stmt_list -> stmt_list . statement
    (11) statement -> . var_decl SEMI
    (12) statement -> . assignment SEMI
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . return_stmt SEMI
    (16) var_decl -> . INT ID
    (17) assignment -> . ID ASSIGN expr
    (18) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (19) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (20) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (21) return_stmt -> . RETURN expr

    RBRACE          shift and go to state 68
    INT             shift and go to state 17
    ID              shift and go to state 18
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    RETURN          shift and go to state 28

    statement                      shift and go to state 32
    var_decl                       shift and go to state 21
    assignment                     shift and go to state 22
    if_stmt                        shift and go to state 23
    while_stmt                     shift and go to state 24
    return_stmt                    shift and go to state 25

state 66

    (20) while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list . RBRACE
    (9) stmt_list -> stmt_list . statement
    (11) statement -> . var_decl SEMI
    (12) statement -> . assignment SEMI
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . return_stmt SEMI
    (16) var_decl -> . INT ID
    (17) assignment -> . ID ASSIGN expr
    (18) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (19) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (20) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (21) return_stmt -> . RETURN expr

    RBRACE          shift and go to state 69
    INT             shift and go to state 17
    ID              shift and go to state 18
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    RETURN          shift and go to state 28

    statement                      shift and go to state 32
    var_decl                       shift and go to state 21
    assignment                     shift and go to state 22
    if_stmt                        shift and go to state 23
    while_stmt                     shift and go to state 24
    return_stmt                    shift and go to state 25

state 67

    (30) arg_list -> arg_list COMMA expr .
    (22) expr -> expr . PLUS expr
    (23) expr -> expr . MINUS expr
    (24) expr -> expr . TIMES expr
    (25) expr -> expr . DIVIDE expr

    RPAREN          reduce using rule 30 (arg_list -> arg_list COMMA expr .)
    COMMA           reduce using rule 30 (arg_list -> arg_list COMMA expr .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 48


state 68

    (18) if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .
    (19) if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE . ELSE LBRACE stmt_list RBRACE

    RBRACE          reduce using rule 18 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 18 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    ID              reduce using rule 18 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 18 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 18 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 18 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    ELSE            shift and go to state 70


state 69

    (20) while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .

    RBRACE          reduce using rule 20 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 20 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    ID              reduce using rule 20 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 20 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 20 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 20 (while_stmt -> WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE .)


state 70

    (19) if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 71


state 71

    (19) if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE . stmt_list RBRACE
    (9) stmt_list -> . stmt_list statement
    (10) stmt_list -> . statement
    (11) statement -> . var_decl SEMI
    (12) statement -> . assignment SEMI
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . return_stmt SEMI
    (16) var_decl -> . INT ID
    (17) assignment -> . ID ASSIGN expr
    (18) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (19) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (20) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (21) return_stmt -> . RETURN expr

    INT             shift and go to state 17
    ID              shift and go to state 18
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    RETURN          shift and go to state 28

    stmt_list                      shift and go to state 72
    statement                      shift and go to state 20
    var_decl                       shift and go to state 21
    assignment                     shift and go to state 22
    if_stmt                        shift and go to state 23
    while_stmt                     shift and go to state 24
    return_stmt                    shift and go to state 25

state 72

    (19) if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list . RBRACE
    (9) stmt_list -> stmt_list . statement
    (11) statement -> . var_decl SEMI
    (12) statement -> . assignment SEMI
    (13) statement -> . if_stmt
    (14) statement -> . while_stmt
    (15) statement -> . return_stmt SEMI
    (16) var_decl -> . INT ID
    (17) assignment -> . ID ASSIGN expr
    (18) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (19) if_stmt -> . IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (20) while_stmt -> . WHILE LPAREN expr RPAREN LBRACE stmt_list RBRACE
    (21) return_stmt -> . RETURN expr

    RBRACE          shift and go to state 73
    INT             shift and go to state 17
    ID              shift and go to state 18
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    RETURN          shift and go to state 28

    statement                      shift and go to state 32
    var_decl                       shift and go to state 21
    assignment                     shift and go to state 22
    if_stmt                        shift and go to state 23
    while_stmt                     shift and go to state 24
    return_stmt                    shift and go to state 25

state 73

    (19) if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .

    RBRACE          reduce using rule 19 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    INT             reduce using rule 19 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    ID              reduce using rule 19 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    IF              reduce using rule 19 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 19 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 19 (if_stmt -> IF LPAREN expr RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 53 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 53 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 54 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 54 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 55 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 55 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 56 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 56 resolved as shift
